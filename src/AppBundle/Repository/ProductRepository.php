<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use Symfony\Component\HttpFoundation\Request;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function fetchProductsByUser($userId){

        $qb = $this->createQueryBuilder('a');

        return $qb->select('a')
            ->where($qb->expr()->eq('a.user', ':userId') )
            ->setParameter(':userId', $userId)
            ->orderBy('a.id', 'DESC')
            ->getQuery();
    }

    public function fetchAllProducts(){
        $qb = $this->createQueryBuilder('a')
            ->join('a.category', 'c')
            ->join('a.user', 'u');
        return $qb->select('a')
            ->orderBy('a.id', 'DESC')
            ->getQuery();
    }


    public function fetchProductsByCat(Category $category){

        $qb = $this->createQueryBuilder('p');

        return $qb->select('p')
            ->where($qb->expr()->eq('p.category', ':catId') )
            ->andWhere($qb->expr()->orX(
                $qb->expr()->gt('p.qty', 0),
                $qb->expr()->isNull('p.qty')
            ))
            ->setParameter(':catId', $category)
            ->orderBy('p.id', 'DESC')
            ->getQuery();
    }


    public function searchProducts($phrase, $category){

        $qb = $this->createQueryBuilder('p');

        $qb->select('p');
        $qb->where($qb->expr()->gt('p.id', 0));

        if( $category > 0 ){
            $qb->andWhere($qb->expr()->eq('p.category', ':catId') )
            ->setParameter(':catId', $category);
        }

        $qb->andWhere($qb->expr()->orX(
                $qb->expr()->like('p.name', ':phrase'),
                $qb->expr()->like('p.description', ':phrase')
            ))
            ->setParameter(':phrase', '%'.$phrase.'%')
            ->orderBy('p.id', 'DESC')->getQuery();

        return $qb->getQuery();
    }

    public function fetchRandomProducts($number_of_products){
        $qb = $this->createQueryBuilder('p');
        return $qb->select('p')
            ->setMaxResults($number_of_products)
            ->orderBy('RAND()')
            ->getQuery();
    }


}
